"use strict";(self.webpackChunkpersonal_page=self.webpackChunkpersonal_page||[]).push([[550],{8776:function(n,s,a){a.r(s),a.d(s,{Head:function(){return h},default:function(){return m}});var t=a(1151),p=a(7294),e=a(9276);function o(n){const s=Object.assign({h1:"h1",p:"p",code:"code",a:"a",strong:"strong",ul:"ul",li:"li",h2:"h2",h3:"h3",div:"div"},(0,t.ah)(),n.components);return p.createElement(p.Fragment,null,p.createElement(s.h1,null,"Custom Hooks"),"\n",p.createElement(s.p,null,"Simply put, a custom hook is a function that uses some React hooks or other functions that contain React hooks (e.g. ",p.createElement(s.code,null,"useQuery")," from Apollo Graphql). The prefix “use” in function hooks' name is a convention in React. It gives developers a hint that the functions contain some React hooks, and therefore they have to use it without breaking ",p.createElement(s.a,{href:"https://reactjs.org/docs/hooks-rules.html"},"the rules of hooks"),"."),"\n",p.createElement(s.p,null,p.createElement(s.strong,null,"Pros:")),"\n",p.createElement(s.ul,null,"\n",p.createElement(s.li,null,"Separation of Concerns","\n",p.createElement(s.ul,null,"\n",p.createElement(s.li,null,"It's achieved by encapsulation, which is a very common approach if you are very used to wrap lines of code that have the same intent into a function, method, or class."),"\n"),"\n"),"\n",p.createElement(s.li,null,"Reusability"),"\n"),"\n",p.createElement(s.p,null,p.createElement(s.strong,null,"Cons:")),"\n",p.createElement(s.ul,null,"\n",p.createElement(s.li,null,"Carefulness","\n",p.createElement(s.ul,null,"\n",p.createElement(s.li,null,"It's not actually a downside, but still require developers to spend more time thinking of how to make a good hook. Otherwise, the code will still be a mess."),"\n"),"\n"),"\n"),"\n",p.createElement(s.h2,null,"Test with React Testing Library"),"\n",p.createElement(s.p,null,"TODO: test hooks with ",p.createElement(s.a,{href:"https://testing-library.com/docs/react-testing-library/api/#renderhook"},p.createElement(s.code,null,"renderHook"))," from ",p.createElement(s.a,{href:"https://testing-library.com/"},"React Testing Library"),"."),"\n",p.createElement(s.h2,null,"Examples"),"\n",p.createElement(e.ZP,{tabLabels:["Toggle","Countdown"]}),"\n",p.createElement(e.x4,{index:0},p.createElement(s.h3,null,"Example: a toggle hook"),p.createElement(s.p,null,p.createElement(s.code,null,"useToggle.js")),p.createElement(s.div,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="jsx"><pre style="counter-reset: linenumber 0" class="language-jsx line-numbers"><code class="language-jsx"><span class="token keyword">import</span> <span class="token punctuation">{</span> useState<span class="token punctuation">,</span> useCallback <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'react\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> <span class="token function-variable function">useToggle</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">defaultState <span class="token operator">=</span> <span class="token boolean">false</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> <span class="token punctuation">[</span>enabled<span class="token punctuation">,</span> setEnabled<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span>defaultState<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">const</span> toggle <span class="token operator">=</span> <span class="token function">useCallback</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    <span class="token function">setEnabled</span><span class="token punctuation">(</span><span class="token parameter">current</span> <span class="token operator">=></span> <span class="token operator">!</span>current<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">return</span> <span class="token punctuation">{</span> enabled<span class="token punctuation">,</span> toggle <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> useToggle<span class="token punctuation">;</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>'}}),p.createElement(s.p,null,p.createElement(s.code,null,"Content.jsx")," (usage)"),p.createElement(s.div,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="jsx"><pre style="counter-reset: linenumber 0" class="language-jsx line-numbers"><code class="language-jsx"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">\'react\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> useToggle <span class="token keyword">from</span> <span class="token string">\'./useToggle.js\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> <span class="token function-variable function">Content</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> toggleState <span class="token operator">=</span> <span class="token function">useToggle</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token plain-text">Status: </span><span class="token punctuation">{</span>countdown<span class="token punctuation">.</span>status<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token plain-text">\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token plain-text">Seconds: </span><span class="token punctuation">{</span>countdown<span class="token punctuation">.</span>seconds<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token plain-text">\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token plain-text">\n        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">htmlFor</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>start<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token plain-text">Start:</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span><span class="token punctuation">{</span><span class="token string">\' \'</span><span class="token punctuation">}</span><span class="token plain-text">\n        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span>\n          <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>start<span class="token punctuation">"</span></span>\n          <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>start<span class="token punctuation">"</span></span>\n          <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>countdown<span class="token punctuation">.</span>start<span class="token punctuation">}</span></span>\n          <span class="token attr-name">disabled</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>countdown<span class="token punctuation">.</span>status <span class="token operator">!==</span> <span class="token constant">COUNTDOWN_STATUS</span><span class="token punctuation">.</span><span class="token constant">READY</span><span class="token punctuation">}</span></span>\n        <span class="token punctuation">></span></span><span class="token plain-text">\n          Toggle\n        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token plain-text">\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token plain-text">\n    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>'}})),"\n",p.createElement(e.x4,{index:1},p.createElement(s.h3,null,"Example: a countdown hook"),p.createElement(s.p,null,p.createElement(s.code,null,"useCountdown.js")),p.createElement(s.div,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="jsx"><pre style="counter-reset: linenumber 0" class="language-jsx line-numbers"><code class="language-jsx"><span class="token keyword">import</span> <span class="token punctuation">{</span> useState<span class="token punctuation">,</span> useEffect<span class="token punctuation">,</span> useCallback <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'react\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token constant">COUNTDOWN_STATUS</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token constant">READY</span><span class="token operator">:</span> <span class="token string">\'ready\'</span><span class="token punctuation">,</span>\n  <span class="token constant">IN_PROGRESS</span><span class="token operator">:</span> <span class="token string">\'in_progress\'</span><span class="token punctuation">,</span>\n  <span class="token constant">FINISHED</span><span class="token operator">:</span> <span class="token string">\'finished\'</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> <span class="token function-variable function">useCountdown</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">initialSeconds</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> <span class="token punctuation">[</span>status<span class="token punctuation">,</span> setStatus<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token constant">COUNTDOWN_STATUS</span><span class="token punctuation">.</span><span class="token constant">READY</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">const</span> <span class="token punctuation">[</span>seconds<span class="token punctuation">,</span> setSeconds<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span>initialSeconds<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>status <span class="token operator">!==</span> <span class="token constant">COUNTDOWN_STATUS</span><span class="token punctuation">.</span><span class="token constant">IN_PROGRESS</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>\n    <span class="token keyword">const</span> intervalId <span class="token operator">=</span> <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n      <span class="token function">setSeconds</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">currentSeconds</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n        <span class="token keyword">const</span> nextSeconds <span class="token operator">=</span> currentSeconds <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>nextSeconds <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          <span class="token function">setStatus</span><span class="token punctuation">(</span><span class="token constant">COUNTDOWN_STATUS</span><span class="token punctuation">.</span><span class="token constant">FINISHED</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword">return</span> nextSeconds<span class="token punctuation">;</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">clearInterval</span><span class="token punctuation">(</span>intervalId<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>status<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">const</span> start <span class="token operator">=</span> <span class="token function">useCallback</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>status <span class="token operator">!==</span> <span class="token constant">COUNTDOWN_STATUS</span><span class="token punctuation">.</span><span class="token constant">READY</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>\n    <span class="token function">setStatus</span><span class="token punctuation">(</span><span class="token constant">COUNTDOWN_STATUS</span><span class="token punctuation">.</span><span class="token constant">IN_PROGRESS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>status<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">const</span> reset <span class="token operator">=</span> <span class="token function">useCallback</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>status <span class="token operator">===</span> <span class="token constant">COUNTDOWN_STATUS</span><span class="token punctuation">.</span><span class="token constant">READY</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>\n    <span class="token function">setSeconds</span><span class="token punctuation">(</span>initialSeconds<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">setStatus</span><span class="token punctuation">(</span><span class="token constant">COUNTDOWN_STATUS</span><span class="token punctuation">.</span><span class="token constant">READY</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>status<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">return</span> <span class="token punctuation">{</span>\n    status<span class="token punctuation">,</span>\n    seconds<span class="token punctuation">,</span>\n    start<span class="token punctuation">,</span>\n    reset<span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> useCountdown<span class="token punctuation">;</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>'}}),p.createElement(s.p,null,p.createElement(s.code,null,"Content.jsx")," (usage)"),p.createElement(s.div,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="jsx"><pre style="counter-reset: linenumber 0" class="language-jsx line-numbers"><code class="language-jsx"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">\'react\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> useCountdown<span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token constant">COUNTDOWN_STATUS</span> <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'./useCountdown.js\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> <span class="token function-variable function">Content</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> countdown <span class="token operator">=</span> <span class="token function">useCountdown</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token plain-text">Status: </span><span class="token punctuation">{</span>countdown<span class="token punctuation">.</span>status<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token plain-text">\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token plain-text">Seconds: </span><span class="token punctuation">{</span>countdown<span class="token punctuation">.</span>seconds<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token plain-text">\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token plain-text">\n        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">htmlFor</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>start<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token plain-text">Start:</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span><span class="token punctuation">{</span><span class="token string">\' \'</span><span class="token punctuation">}</span><span class="token plain-text">\n        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span>\n          <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>start<span class="token punctuation">"</span></span>\n          <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>start<span class="token punctuation">"</span></span>\n          <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>countdown<span class="token punctuation">.</span>start<span class="token punctuation">}</span></span>\n          <span class="token attr-name">disabled</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>countdown<span class="token punctuation">.</span>status <span class="token operator">!==</span> <span class="token constant">COUNTDOWN_STATUS</span><span class="token punctuation">.</span><span class="token constant">READY</span><span class="token punctuation">}</span></span>\n        <span class="token punctuation">></span></span><span class="token plain-text">\n          Start\n        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token plain-text">\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token plain-text">\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token plain-text">\n        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">htmlFor</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>reset<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token plain-text">Reset:</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span><span class="token punctuation">{</span><span class="token string">\' \'</span><span class="token punctuation">}</span><span class="token plain-text">\n        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span>\n          <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>reset<span class="token punctuation">"</span></span>\n          <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>reset<span class="token punctuation">"</span></span>\n          <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>countdown<span class="token punctuation">.</span>reset<span class="token punctuation">}</span></span>\n          <span class="token attr-name">disabled</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>countdown<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token constant">COUNTDOWN_STATUS</span><span class="token punctuation">.</span><span class="token constant">READY</span><span class="token punctuation">}</span></span>\n        <span class="token punctuation">></span></span><span class="token plain-text">\n          Reset\n        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token plain-text">\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token plain-text">\n    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> Content<span class="token punctuation">;</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>'}})))}var c=function(n){void 0===n&&(n={});const{wrapper:s}=Object.assign({},(0,t.ah)(),n.components);return s?p.createElement(s,n,p.createElement(o,n)):o(n)},l=a(4854),u=a(6089),k=a(2070),i=a(2658),r=a(118);const d=n=>{let{siteName:s,pageName:a}=n;return p.createElement(k.Z,{sx:{mt:1},"aria-label":"breadcrumb"},p.createElement(l.Link,{to:"/"},s),p.createElement(i.Z,{color:"text.primary"},"Docs"),p.createElement(i.Z,{color:"text.primary"},a))},g=n=>{let{children:s,pageContext:a}=n;const{0:t,1:o}=(0,p.useState)(0),c=(0,p.useCallback)((n=>{o(n)}),[]);return p.createElement(r.Z,null,p.createElement(e.eL.Provider,{value:{openedTabId:t,handleTabClick:c}},p.createElement(u.Z,null,p.createElement(d,{siteName:a.siteTitle,pageName:a.title}),s)))};function m(n){return p.createElement(g,n,p.createElement(c,n))}const h=n=>{let{pageContext:s}=n;return p.createElement("title",null,s.title," - ",s.siteTitle)}}}]);
//# sourceMappingURL=component---src-templates-docs-page-tsx-content-file-path-root-projects-devs-manual-src-content-docs-custom-hooks-mdx-2c7274c04be9ac018a6e.js.map